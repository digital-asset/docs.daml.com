#!/usr/bin/env bash

set -euo pipefail

DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

cd $DIR/..

snapshots=$(bin/list-hidden-versions \
            | jq -Rr '
                    # We get a version string per line. They are not quoted so
                    # they are not valid JSON, but -R turns each of them into a
                    # JSON string. (-r is to avoid quotes in the output.)

                    # we create (for each string/version) a new vector
                    # string division is split
                    [., . / "."]
                    # -> ["2.2.0-snap1", ["2", "2", "0-snap1"]]
                    # select is filter
                    # we only keep versions after 1.x line
                    | select(
                              # first element of second element: major version number
                              # converted to number so we can make a numeric comparison
                             (.[1][0] | tonumber) > 1
                            )
                    # we keep just the version number, we do not need the vector of
                    # elements anymore
                    | .[0]
                    ' \
            | sort -V)

graphql() (
  version=$1
  echo '
  {
    repository (name: "daml", owner: "digital-asset") {
      release (tagName: "v'$version'") {
        releaseAssets (first: 100) {
          nodes {
            name
          }
        }
      }
    }
  }
  '
)

for version in $snapshots; do
  echo "> $version"
  if curl -Ifs https://docs.daml.com/$version/index.html &> /dev/null
  then echo "-> Nothing to do."
  elif [ "$version" = "2.0.1-snapshot.20220419.9374.0.44df8f12" ] \
    || [ "$version" = "2.1.0-snapshot.20220411.9707.0.f6fed6ea" ] \
    || [ "$version" = "2.5.0-snapshot.20221010.10736.0.2f453a14" ] \
    || [ "$version" = "2.7.0-snapshot.20230327.11615.0.9aa586fb" ]
  then echo " -> Skipping, known broken."
  else
    base=${version%-*}
    if [ -d docs/$base ]; then
      (
        cd docs/$base
        canton=$(curl -H "Authorization: bearer $GITHUB_TOKEN" \
                      --fail \
                      --silent \
                      https://api.github.com/graphql \
                      -XPOST \
                      -d"$(jq -n --arg q "$(graphql $version)" '{query: $q}')" \
                 | jq -r '.data.repository.release.releaseAssets.nodes[].name' \
                 | grep canton \
                 | head -1 \
                 | sed 's/canton-open-source-\(.*\)\.tar\.gz/\1/')
        echo " -> canton: $canton"
        if [ -f versions.json ]; then
          ver=versions.json
        else
          ver=LATEST
        fi
        finance=$(jq -r '.daml_finance' $ver)
        echo " -> finance: $finance"
        tmp=$(mktemp)
        jq --arg daml $version \
           --arg canton $canton \
           '.daml |= $daml | .canton |= $canton' \
           $ver \
           > $tmp
        mv $tmp $ver
        nix-shell shell.nix --pure \
                            --keep ARTIFACTORY_USERNAME \
                            --keep ARTIFACTORY_PASSWORD \
                            --run bash <<'NIX'
set -euo pipefail
if [ -f .python-env/bin/activate ]; then
  source .python-env/bin/activate
  PATH="$(pwd)/.python-env/bin:$PATH"
fi
bin/clean
bin/build
NIX
        if [ "${CI:-}" = "true" ]; then
          echo " -> Pushing to S3..."
          upload=$(mktemp -d)
          tar xf workdir/target/html-$base.tar.gz -C $upload --strip-components=1
          aws s3 cp $upload s3://docs-daml-com/$version --recursive --acl public-read --region us-east-1 --no-progress
          aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$version/*"
        else
          echo " -> Not running on CI, not pushing."
        fi
        echo "-> Done."
      )
    else
      echo " -> No base version $base found for $version, unable to proceed."
      exit 1
    fi
  fi
done
