# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2.1

env: &env
  TERM: dumb
  CI: "true"
  USER: circleci

commands:
  setup_nix:
    description: Set up Nix
    steps:
    - run:
        name: make_cache_key
        command: |
          set -euo pipefail

          git log -n1 --format=%H nix shell.nix > /tmp/nix-cache-key
          sudo mkdir /nix
          sudo chown $USER /nix
    - restore_cache:
        keys:
        - nix-{{ checksum "/tmp/nix-cache-key" }}
    - run:
       name: setup_nix
       command: |
         set -euo pipefail

         if [ -f ~/.config/nix/nix.conf ]; then
             exit 0
         fi

         # Disabling sandbox because:
         # 1. It doesn't work on CircleCI (sethostname is not allowed)
         # 2. We don't plan to build anything, so the risk is fairly low
         mkdir -p ~/.config/nix
         echo 'sandbox = false' >> ~/.config/nix/nix.conf

         sh <(curl -fsSL https://nixos.org/nix/install) --no-daemon
         . /home/circleci/.nix-profile/etc/profile.d/nix.sh
         nix-shell shell.nix --run 'echo "Done loading all packages."'
    - save_cache:
        key: nix-{{ checksum "/tmp/nix-cache-key" }}
        paths:
        - /nix
        - /home/circleci/.nix-profile
        - /home/circleci/.nix-channels
        - /home/circleci/.nix-defexpr
        - /home/circleci/.config/nix

jobs:
  build_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - run:
         name: build
         command: |
           set -euo pipefail

           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           mkdir -p /tmp/workspace

           nix-shell shell.nix \
             --pure \
             --keep ARTIFACTORY_USERNAME \
             --keep ARTIFACTORY_PASSWORD \
             --run bash \<<'EOF'
             set -euo pipefail
             prefix=$(jq -r '.prefix' LATEST)
             if [[ ${#prefix} -lt 5 ]]; then
               echo "Pushhing to $prefix is not currently supported."
               exit 1
             fi
             bin/download
             bin/build
             mv workdir/target/html-docs-*.tar.gz /tmp/workspace/
           EOF
      - store_artifacts:
         path: /tmp/workspace
      - persist_to_workspace:
         root: /tmp/workspace
         paths:
         - "*"

  push_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - attach_workspace:
         at: /tmp/workspace
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --run bash \<<'EOF'
             set -euo pipefail

             prefix=$(jq -r '.prefix' LATEST)
             sdk_version=$(jq -r '.daml' LATEST)
             if [[ ${#prefix} -lt 5 ]]; then
               echo "Pushhing to $prefix is not currently supported."
               exit 1
             fi

             upload=$(mktemp -d)
             tar xf /tmp/workspace/html-docs-$sdk_version.tar.gz -C $upload --strip-components=1
             aws s3 rm s3://docs-daml-com/$prefix --recursive --region us-east-1
             aws s3 cp $upload s3://docs-daml-com/$prefix --recursive --acl public-read --region us-east-1
             aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$prefix/*"
           EOF

  publish_snapshots:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep GITHUB_TOKEN \
             --keep ARTIFACTORY_USERNAME \
             --keep ARTIFACTORY_PASSWORD \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --run bash \<<'EOF'
             set -euo pipefail

             snapshots=$(curl -sf https://docs.daml.com/snapshots.json \
                        | jq -r '
                                # The snapshots.json file is a map of version to version.
                                # {"2.2.0-snap1": "2.2.0-snap1", "1.2.0-snap2": "1.2.0-snap2"}
                                # keys turns that into a vector of just the keys (the versions)
                                keys
                                # ["2.2.0-snap1", "1.2.0-snap2"]
                                # [] turns that vector into each individual string in it
                                | .[]
                                # we create (for each string) a new vector
                                # string division is split
                                | [., . / "."]
                                # ["2.2.0-snap1", ["2", "2", "0-snap1"]]
                                # select is filter
                                # we only keep versions after 1.x line
                                | select(
                                          # first element of second element: major version number
                                          # converted to number so we can make a numeric comparison
                                         (.[1][0] | tonumber) > 1
                                        )
                                # we keep just the version number, we do not need the vector of
                                # elements anymore
                                | .[0]
                                ' \
                        )
             graphql() (
               version=$1
               echo '
               {
                 repository (name: "daml", owner: "digital-asset") {
                   release (tagName: "v'$version'") {
                     releaseAssets (first: 100) {
                       nodes {
                         name
                       }
                     }
                   }
                 }
               }
               '
             )

             for version in $snapshots; do
                 echo "> $version"
                 if curl -Ifs https://docs.daml.com/$version/index.html &> /dev/null
                 then echo "-> Nothing to do."
                 elif [ "$version" = "2.0.1-snapshot.20220419.9374.0.44df8f12" ] \
                   || [ "$version" = "2.1.0-snapshot.20220411.9707.0.f6fed6ea" ] \
                   || [ "$version" = "2.5.0-snapshot.20221010.10736.0.2f453a14" ]
                 then echo "-> Skipping, known broken."
                 else
                     echo "-> Getting Canton version"
                     canton=$(curl -H "Authorization: bearer $GITHUB_TOKEN" \
                                   --fail \
                                   --silent \
                                   https://api.github.com/graphql \
                                   -XPOST \
                                   -d"$(jq -n --arg q "$(graphql $version)" '{query: $q}')" \
                            | jq -r '.data.repository.release.releaseAssets.nodes[].name' \
                            | grep canton \
                            | head -1 \
                            | sed 's/canton-open-source-\(.*\)\.tar\.gz/\1/')
                     finance=$(git show origin/main:LATEST | jq -r '.daml_finance')
                     echo "-> Building daml $version with canton $canton & finance $finance."
                     jq -n \
                        --arg daml $version \
                        --arg canton $canton \
                        --arg finance $finance \
                        '{daml: $daml, canton: $canton, prefix: $daml, daml_finance: $finance}' \
                        > LATEST

                     bin/clean
                     bin/download
                     bin/build
                     upload=$(mktemp -d)
                     tar xf workdir/target/html-docs-$version.tar.gz -C $upload --strip-components=1
                     aws s3 cp $upload s3://docs-daml-com/$version --recursive --acl public-read --region us-east-1
                     aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$version/*"
                     echo "-> Done."
                 fi
                 echo
             done
           EOF

workflows:
  version: 2
  build:
    jobs:
    - build_docs
    - push_docs:
        requires:
        - build_docs
        filters:
          branches:
            only: main
  cron:
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only:
            - main
    jobs:
    - publish_snapshots
