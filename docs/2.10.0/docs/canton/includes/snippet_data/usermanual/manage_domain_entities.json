{
  "88" : {
    "command" : "domainManager1.health.wait_for_identity()",
    "output" : ""
  },
  "174" : {
    "command" : "val sequencerPublicKey = SigningPublicKey.tryReadFromFile(\"tmp/domain-bootstrapping-files/seq1-key.proto\")",
    "output" : "sequencerPublicKey : SigningPublicKey = SigningPublicKey(id = 1220988927ac..., format = Tink, scheme = Ed25519)"
  },
  "157" : {
    "command" : "domainManager1.service.get_static_domain_parameters.writeToFile(\"tmp/domain-bootstrapping-files/params.proto\")",
    "output" : ""
  },
  "211" : {
    "command" : "val sequencerConnections = SequencerConnections.tryReadFromFile(\"tmp/domain-bootstrapping-files/sequencer-connection.proto\")",
    "output" : "sequencerConnections : SequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n  endpoints = http://127.0.0.1:30239,\n  transportSecurity = false\n)"
  },
  "165" : {
    "command" : "val domainParameters = com.digitalasset.canton.admin.api.client.data.StaticDomainParameters.tryReadFromFile(\"tmp/domain-bootstrapping-files/params.proto\")",
    "output" : "domainParameters : StaticDomainParameters = StaticDomainParametersV1(\n  uniqueContractKeys = true,\n  requiredSigningKeySchemes = Set(Ed25519, ECDSA-P256, ECDSA-P384),\n  requiredEncryptionKeySchemes = Set(ECIES-P256_HMAC256_AES128-GCM),\n  requiredSymmetricKeySchemes = Set(AES128-GCM),\n  requiredHashAlgorithms = Set(Sha256),\n  requiredCryptoKeyFormats = Set(Tink, Raw, DER),\n  protocolVersion = 5\n)"
  },
  "205" : {
    "command" : "SequencerConnections.single(sequencer1.sequencerConnection).writeToFile(\"tmp/domain-bootstrapping-files/sequencer-connection.proto\")",
    "output" : ""
  },
  "213" : {
    "command" : "mediator1.mediator.initialize(domainId, MediatorId(domainId), domainParameters, sequencerConnections, None)",
    "output" : "res21: PublicKey = SigningPublicKey(id = 12201c4b751d..., format = Tink, scheme = Ed25519)"
  },
  "123" : {
    "command" : "participant1.domains.connect_local(sequencer1)",
    "output" : ""
  },
  "175" : {
    "command" : "domainManager1.setup.helper.authorizeKey(sequencerPublicKey, \"sequencer\", SequencerId(domainManager1.id))",
    "output" : ""
  },
  "203" : {
    "command" : "",
    "output" : ""
  },
  "168" : {
    "command" : "val initResponse = sequencer1.initialization.initialize_from_beginning(domainId, domainParameters)",
    "output" : "initResponse : com.digitalasset.canton.domain.sequencing.admin.grpc.InitializeSequencerResponse = InitializeSequencerResponse(\n  keyId = \"sequencer-id\",\n  publicKey = SigningPublicKey(id = 1220988927ac..., format = Tink, scheme = Ed25519),\n  replicated = false\n)"
  },
  "227" : {
    "command" : "participant1.health.ping(participant1)",
    "output" : "res27: Duration = 332 milliseconds"
  },
  "115" : {
    "command" : "domainManager1.setup.bootstrap_domain(Seq(sequencer1), Seq(mediator1))",
    "output" : ""
  },
  "202" : {
    "command" : "val initialTopology = com.digitalasset.canton.topology.store.StoredTopologyTransactions.tryReadFromFile(\"tmp/domain-bootstrapping-files/topology-transactions.proto\").collectOfType[TopologyChangeOp.Positive]",
    "output" : "initialTopology : store.StoredTopologyTransactions[TopologyChangeOp.Positive] = Seq(\n  StoredTopologyTransaction(\n    sequenced = 2024-06-26T13:05:43.093326Z,\n    validFrom = 2024-06-26T13:05:43.093326Z,\n    op = Add,\n    mapping = NamespaceDelegation(\n.."
  },
  "189" : {
    "command" : "domainManager1.topology.mediator_domain_states.authorize(TopologyChangeOp.Add, domainId, MediatorId(domainId), RequestSide.Both)",
    "output" : "res14: com.google.protobuf.ByteString = <ByteString@6f32b7af size=560 contents=\"\\n\\255\\004\\n\\333\\001\\n\\326\\001\\n\\323\\001\\022 BTB3YskdIb37IU64bn53HsqgRVN6kkduR...\">"
  },
  "78" : {
    "command" : "",
    "output" : ""
  },
  "221" : {
    "command" : "domainManager1.health.wait_for_initialized()",
    "output" : ""
  },
  "116" : {
    "command" : "",
    "output" : ""
  },
  "117" : {
    "command" : "",
    "output" : ""
  },
  "220" : {
    "command" : "domainManager1.setup.init(sequencerConnection)",
    "output" : ""
  },
  "188" : {
    "command" : "domainManager1.setup.helper.authorizeKey(mediatorKey, \"mediator1\", MediatorId(domainId))",
    "output" : ""
  },
  "169" : {
    "command" : "initResponse.publicKey.writeToFile(\"tmp/domain-bootstrapping-files/seq1-key.proto\")",
    "output" : ""
  },
  "124" : {
    "command" : "participant1.health.ping(participant1)",
    "output" : "res7: Duration = 413 milliseconds"
  },
  "77" : {
    "command" : "mediator1.health.initialized()",
    "output" : "res1: Boolean = false"
  },
  "212" : {
    "command" : "val domainParameters = com.digitalasset.canton.admin.api.client.data.StaticDomainParameters.tryReadFromFile(\"tmp/domain-bootstrapping-files/params.proto\")",
    "output" : "domainParameters : StaticDomainParameters = StaticDomainParametersV1(\n  uniqueContractKeys = true,\n  requiredSigningKeySchemes = Set(Ed25519, ECDSA-P256, ECDSA-P384),\n  requiredEncryptionKeySchemes = Set(ECIES-P256_HMAC256_AES128-GCM),\n  requiredSymmetricKeySchemes = Set(AES128-GCM),\n  requiredHashAlgorithms = Set(Sha256),\n  requiredCryptoKeyFormats = Set(Tink, Raw, DER),\n  protocolVersion = 5\n)"
  },
  "166" : {
    "command" : "val domainId = DomainId.tryFromString(domainIdString)",
    "output" : "domainId : DomainId = domainManager1::122070826d75..."
  },
  "180" : {
    "command" : "mediator1.keys.secret.generate_signing_key(mediator1.name + \"-signing\").writeToFile(\"tmp/domain-bootstrapping-files/med1-key.proto\")",
    "output" : ""
  },
  "118" : {
    "command" : "",
    "output" : ""
  },
  "204" : {
    "command" : "sequencer1.initialization.bootstrap_topology(initialTopology)",
    "output" : ""
  },
  "187" : {
    "command" : "val domainId = DomainId.tryFromString(domainIdString)",
    "output" : "domainId : DomainId = domainManager1::122070826d75..."
  },
  "219" : {
    "command" : "val sequencerConnection = SequencerConnections.tryReadFromFile(\"tmp/domain-bootstrapping-files/sequencer-connection.proto\")",
    "output" : "sequencerConnection : SequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n  endpoints = http://127.0.0.1:30239,\n  transportSecurity = false\n)"
  },
  "81" : {
    "command" : "domainManager1.health.initialized()",
    "output" : "res3: Boolean = false"
  },
  "226" : {
    "command" : "participant1.domains.connect_local(sequencer1)",
    "output" : ""
  },
  "80" : {
    "command" : "",
    "output" : ""
  },
  "167" : {
    "command" : "sequencer1.keys.secret.generate_signing_key(sequencer1.name + \"-signing\")",
    "output" : "res5: SigningPublicKey = SigningPublicKey(id = 1220988927ac..., format = Tink, scheme = Ed25519)"
  },
  "158" : {
    "command" : "val domainIdString = domainManager1.id.toProtoPrimitive",
    "output" : "domainIdString : String = \"domainManager1::122070826d75201d2073af92380687e82a2632c7a40260843f37dda1bc1a7c298940\""
  },
  "186" : {
    "command" : "val mediatorKey = SigningPublicKey.tryReadFromFile(\"tmp/domain-bootstrapping-files/med1-key.proto\")",
    "output" : "mediatorKey : SigningPublicKey = SigningPublicKey(id = 12201c4b751d..., format = Tink, scheme = Ed25519)"
  },
  "82" : {
    "command" : "",
    "output" : ""
  },
  "214" : {
    "command" : "mediator1.health.wait_for_initialized()",
    "output" : ""
  },
  "79" : {
    "command" : "sequencer1.health.initialized()",
    "output" : "res2: Boolean = false"
  },
  "195" : {
    "command" : "domainManager1.topology.all.list().collectOfType[TopologyChangeOp.Positive].writeToFile(\"tmp/domain-bootstrapping-files/topology-transactions.proto\")",
    "output" : ""
  }
}