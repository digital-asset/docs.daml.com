{
  "101" : {
    "command" : "",
    "output" : ""
  },
  "202" : {
    "command" : "val config = DomainConnectionConfig(domain = \"mydomain\", sequencerConnection, manualConnect, domainId, priority)",
    "output" : "config : DomainConnectionConfig = DomainConnectionConfig(\n  domain = Domain 'mydomain',\n  sequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n    endpoints = Seq(http://127.0.0.1:30123, http://127.0.0.1:30121),\n    transportSecurity = false,\n    customTrustCertificates = None()\n  ),\n  manualConnect = false,\n  domainId = Some(domainManager1::1220b9035a1f...),\n  priority = 10,\n  initialRetryDelay = None(),\n  maxRetryDelay = None()\n)"
  },
  "189" : {
    "command" : "participant3.domains.reconnect(\"mydomain\")",
    "output" : "res18: Boolean = true"
  },
  "253" : {
    "command" : "participant2.domains.reconnect(\"mydomain\")",
    "output" : "res27: Boolean = true"
  },
  "41" : {
    "command" : "",
    "output" : ""
  },
  "86" : {
    "command" : "val port = sequencer3.config.publicApi.port",
    "output" : "port : Port = Port(n = 30119)"
  },
  "67" : {
    "command" : "",
    "output" : ""
  },
  "43" : {
    "command" : "",
    "output" : ""
  },
  "290" : {
    "command" : "",
    "output" : ""
  },
  "100" : {
    "command" : "participant2.domains.connect(\"mydomain\", connection = url, certificatesPath = certificatesPath)",
    "output" : "res8: DomainConnectionConfig = DomainConnectionConfig(\n  domain = Domain 'mydomain',\n  sequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n    endpoints = https://127.0.0.1:30119,\n    transportSecurity = true,\n    customTrustCertificates = Some(2d2d2d2d2d42)\n  ),\n  manualConnect = false,\n  domainId = None(),\n  priority = 0,\n  initialRetryDelay = None(),\n  maxRetryDelay = None()\n)"
  },
  "174" : {
    "command" : "val priority = 10 // default is 0 if not set",
    "output" : "priority : Int = 10"
  },
  "42" : {
    "command" : "participant1.domains.connect_local(sequencer1)",
    "output" : ""
  },
  "61" : {
    "command" : "sequencer1.config.publicApi.port",
    "output" : "res2: Port = Port(n = 30123)"
  },
  "312" : {
    "command" : "mediator1.mediator.help(\"initialize\")",
    "output" : "initialize(domainId: com.digitalasset.canton.topology.DomainId, mediatorId: com.digitalasset.canton.topology.MediatorId, domainParameters: com.digitalasset.canton.admin.api.client.data.StaticDomainParameters, sequencerConnection: com.digitalasset.canton.sequencing.SequencerConnection, topologySnapshot: Option[com.digitalasset.canton.topology.store.StoredTopologyTransactions[com.digitalasset.canton.topology.transaction.TopologyChangeOp.Positive]]): com.digitalasset.canton.crypto.PublicKey\nInitialize a mediator\ninitialize(domainId: com.digitalasset.canton.topology.DomainId, mediatorId: com.digitalasset.canton.topology.MediatorId, domainParameters: com.digitalasset.canton.admin.api.client.data.StaticDomainParameters, sequencerConnections: com.digitalasset.canton.sequencing.SequencerConnections, topologySnapshot: Option[com.digitalasset.canton.topology.store.StoredTopologyTransactions[com.digitalasset.canton.topology.transaction.TopologyChangeOp.Positive]]): com.digitalasset.canton.crypto.PublicKey\nInitialize a mediator"
  },
  "292" : {
    "command" : "",
    "output" : ""
  },
  "117" : {
    "command" : "participant3.domains.connect_multi(\"mydomain\", Seq(sequencer1, sequencer2))",
    "output" : "res9: DomainConnectionConfig = DomainConnectionConfig(\n  domain = Domain 'mydomain',\n  sequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n    endpoints = Seq(http://0.0.0.0:30123, http://127.0.0.1:30121),\n    transportSecurity = false,\n    customTrustCertificates = None()\n  ),\n  manualConnect = false,\n  domainId = None(),\n  priority = 0,\n  initialRetryDelay = None(),\n  maxRetryDelay = None()\n)"
  },
  "302" : {
    "command" : "participant2.domains.reconnect_all()",
    "output" : ""
  },
  "160" : {
    "command" : "val sequencerConnection = sequencerConnectionWithoutHighAvailability.addEndpoints(urls(1))",
    "output" : "sequencerConnection : SequencerConnection = GrpcSequencerConnection(\n  endpoints = Seq(http://127.0.0.1:30123, http://127.0.0.1:30121),\n  transportSecurity = false,\n  customTrustCertificates = None()\n)"
  },
  "297" : {
    "command" : "participant2.domains.reconnect(\"mydomain\")",
    "output" : "res32: Boolean = true"
  },
  "252" : {
    "command" : "participant2.domains.disconnect(\"mydomain\")",
    "output" : ""
  },
  "197" : {
    "command" : "val domainId = Some(domainManager1.id)",
    "output" : "domainId : Some[DomainId] = Some(value = domainManager1::1220b9035a1f...)"
  },
  "329" : {
    "command" : "",
    "output" : ""
  },
  "224" : {
    "command" : "participant2.domains.list_connected()",
    "output" : "res23: Seq[ListConnectedDomainsResult] = Vector(\n  ListConnectedDomainsResult(\n    domainAlias = Domain 'mydomain',\n    domainId = domainManager1::1220b9035a1f...,\n    healthy = true\n  )\n)"
  },
  "317" : {
    "command" : "mediator1.sequencer_connection.get()",
    "output" : "res35: Option[SequencerConnections] = Some(\n  value = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n    endpoints = http://0.0.0.0:30123,\n    transportSecurity = false,\n    customTrustCertificates = None()\n  )\n)"
  },
  "169" : {
    "command" : "val connectionWithTLS = com.digitalasset.canton.sequencing.GrpcSequencerConnection.tryCreate(\"https://daml.com\", customTrustCertificates = Some(certificate))",
    "output" : "connectionWithTLS : GrpcSequencerConnection = GrpcSequencerConnection(\n  endpoints = https://daml.com:443,\n  transportSecurity = true,\n  customTrustCertificates = Some(2d2d2d2d2d42)\n)"
  },
  "141" : {
    "command" : "val domainAlias = \"mydomain\"",
    "output" : "domainAlias : String = \"mydomain\""
  },
  "328" : {
    "command" : "mediator1.sequencer_connection.modify(_.addEndpoints(sequencer2.sequencerConnection))",
    "output" : ""
  },
  "225" : {
    "command" : "",
    "output" : ""
  },
  "44" : {
    "command" : "",
    "output" : ""
  },
  "291" : {
    "command" : "participant2.domains.disconnect(\"mydomain\")",
    "output" : ""
  },
  "118" : {
    "command" : "",
    "output" : ""
  },
  "219" : {
    "command" : "",
    "output" : ""
  },
  "81" : {
    "command" : "",
    "output" : ""
  },
  "230" : {
    "command" : "participant2.domains.config(\"mydomain\")",
    "output" : "res24: Option[DomainConnectionConfig] = Some(\n  value = DomainConnectionConfig(\n    domain = Domain 'mydomain',\n    sequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n      endpoints = https://127.0.0.1:30119,\n      transportSecurity = true,\n      customTrustCertificates = Some(2d2d2d2d2d42)\n    ),\n    manualConnect = false,\n    domainId = None(),\n    priority = 0,\n    initialRetryDelay = None(),\n    maxRetryDelay = None()\n  )\n)"
  },
  "208" : {
    "command" : "participant4.domains.register(config)",
    "output" : ""
  },
  "323" : {
    "command" : "mediator1.sequencer_connection.set(sequencer1.sequencerConnection)",
    "output" : ""
  },
  "66" : {
    "command" : "sequencer1.config.publicApi.address",
    "output" : "res3: String = \"0.0.0.0\""
  },
  "240" : {
    "command" : "participant2.domains.modify(\"mydomain\", _.copy(priority = 20))",
    "output" : ""
  },
  "155" : {
    "command" : "val sequencerConnectionWithoutHighAvailability = com.digitalasset.canton.sequencing.GrpcSequencerConnection.tryCreate(urls(0))",
    "output" : "sequencerConnectionWithoutHighAvailability : GrpcSequencerConnection = GrpcSequencerConnection(\n  endpoints = http://127.0.0.1:30123,\n  transportSecurity = false,\n  customTrustCertificates = None()\n)"
  },
  "278" : {
    "command" : "participant2.domains.modify(\"mydomain\", _.copy(sequencerConnections=SequencerConnections.single(connection)))",
    "output" : ""
  },
  "267" : {
    "command" : "val certificate = com.digitalasset.canton.util.BinaryFileUtil.tryReadByteStringFromFile(\"tls/root-ca.crt\")",
    "output" : "certificate : com.google.protobuf.ByteString = <ByteString@6f432dcb size=1960 contents=\"-----BEGIN CERTIFICATE-----\\nMIIFeTCCA2GgAwIBAgI...\">"
  },
  "80" : {
    "command" : "sequencer3.config.publicApi.tls",
    "output" : "res4: Option[TlsBaseServerConfig] = Some(\n  value = TlsBaseServerConfig(\n    certChainFile = ExistingFile(file = ./tls/sequencer3-127.0.0.1.crt),\n    privateKeyFile = ExistingFile(file = ./tls/sequencer3-127.0.0.1.pem),\n    minimumServerProtocolVersion = Some(value = \"TLSv1.2\"),\n    ciphers = Some(\n      value = List(\n        \"TLS_AES_256_GCM_SHA384\",\n        \"TLS_CHACHA20_POLY1305_SHA256\",\n        \"TLS_AES_128_GCM_SHA256\",\n        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\"\n      )\n    )\n  )\n)"
  },
  "150" : {
    "command" : "val urls = Seq(sequencer1, sequencer2).map(_.config.publicApi.port).map(port => s\"http://127.0.0.1:${port}\")",
    "output" : "urls : Seq[String] = List(\"http://127.0.0.1:30123\", \"http://127.0.0.1:30121\")"
  },
  "95" : {
    "command" : "val certificatesPath = \"tls/root-ca.crt\"",
    "output" : "certificatesPath : String = \"tls/root-ca.crt\""
  },
  "87" : {
    "command" : "val url = s\"https://127.0.0.1:${port}\"",
    "output" : "url : String = \"https://127.0.0.1:30119\""
  },
  "218" : {
    "command" : "participant2.domains.list_registered()",
    "output" : "res22: Seq[(DomainConnectionConfig, Boolean)] = Vector(\n  (\n    DomainConnectionConfig(\n      domain = Domain 'mydomain',\n      sequencerConnections = Sequencer 'DefaultSequencer' -> GrpcSequencerConnection(\n        endpoints = https://127.0.0.1:30119,\n        transportSecurity = true,\n        customTrustCertificates = Some(2d2d2d2d2d42)\n      ),\n      manualConnect = false,\n      domainId = None(),\n      priority = 0,\n      initialRetryDelay = None(),\n      maxRetryDelay = None()\n    ),\n    true\n  )\n)"
  },
  "168" : {
    "command" : "val certificate = com.digitalasset.canton.util.BinaryFileUtil.tryReadByteStringFromFile(\"tls/root-ca.crt\")",
    "output" : "certificate : com.google.protobuf.ByteString = <ByteString@5ca338e4 size=1960 contents=\"-----BEGIN CERTIFICATE-----\\nMIIFeTCCA2GgAwIBAgI...\">"
  },
  "183" : {
    "command" : "val manualConnect = false",
    "output" : "manualConnect : Boolean = false"
  },
  "273" : {
    "command" : "val connection = com.digitalasset.canton.sequencing.GrpcSequencerConnection.tryCreate(url, customTrustCertificates = Some(certificate))",
    "output" : "connection : GrpcSequencerConnection = GrpcSequencerConnection(\n  endpoints = https://127.0.0.1:30119,\n  transportSecurity = true,\n  customTrustCertificates = Some(2d2d2d2d2d42)\n)"
  }
}