# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2.1

env: &env
  TERM: dumb
  CI: "true"
  USER: circleci

commands:
  setup_nix:
    description: Set up Nix
    steps:
    - run:
        name: make_cache_key
        command: |
          set -euo pipefail

          git log -n1 --format=%H nix shell.nix docs/*/nix docs/*/shell.nix > /tmp/nix-cache-key
          sudo mkdir /nix
          sudo chown $USER /nix
    - restore_cache:
        keys:
        - nix-{{ checksum "/tmp/nix-cache-key" }}
    - run:
       name: setup_nix
       command: |
         set -euo pipefail

         if [ -f ~/.config/nix/nix.conf ]; then
             exit 0
         fi

         # Disabling sandbox because:
         # 1. It doesn't work on CircleCI (sethostname is not allowed)
         # 2. We don't plan to build anything, so the risk is fairly low
         mkdir -p ~/.config/nix
         echo 'sandbox = false' >> ~/.config/nix/nix.conf

         sh <(curl -fsSL https://nixos.org/releases/nix/nix-2.10.3/install) --no-daemon
         . /home/circleci/.nix-profile/etc/profile.d/nix.sh
         nix-shell shell.nix --run 'echo "Done loading all root packages."'
         cd docs
         for v in *; do
             cd $v
             nix-shell shell.nix --pure --run 'echo "Done loading all packages in $v."'
             cd -
         done
    - save_cache:
        key: nix-{{ checksum "/tmp/nix-cache-key" }}
        paths:
        - /nix
        - /home/circleci/.nix-profile
        - /home/circleci/.nix-channels
        - /home/circleci/.nix-defexpr
        - /home/circleci/.config/nix
  setup_python:
    description: Set up Python
    steps:
    - run:
        name: setup_python
        command: |
          set -euo pipefail
          . /home/circleci/.nix-profile/etc/profile.d/nix.sh
          cd docs
          for v in *; do
              cd $v
              if [ -f bin/setup-python ]; then
                  nix-shell shell.nix --pure --run "bin/setup-python"
              fi
              cd -
          done

jobs:
  build_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - setup_python
      - run:
         name: build
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           mkdir -p /tmp/workspace
           touch /tmp/workspace/.keep

           root=$(cat root)
           cd docs
           for v in *; do
               sha=$(git log -n1 --format=%H $v)
               cd $v
               if ([ "$(curl -s https://docs.daml.com/$v/sha)" = "$sha" ] && [ "$v" != "$root" ]) \
                 || ([ "$v" == "$root" ] && [ "$(curl -s https://docs.daml.com/sha)" == "$sha" ]); then
                   echo "$v is up-to-date, nothing to do."
               else
                   nix-shell shell.nix \
                     --pure \
                     --keep ARTIFACTORY_USERNAME \
                     --keep ARTIFACTORY_PASSWORD \
                     --run bash \<<'EOF'
                       set -euo pipefail
                       if [ -f .python-env/bin/activate ]; then
                           source .python-env/bin/activate
                           PATH="$(pwd)/.python-env/bin:$PATH"
                       fi
                       bin/build
           EOF
                   mv workdir/target/html-$v.tar.gz /tmp/workspace
               fi
               cd -
           done
           cd ..
           root=$(cat root)
           bin/check-root $root
      - store_artifacts:
         path: /tmp/workspace
      - persist_to_workspace:
         root: /tmp/workspace
         paths:
         - "*"

  push_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - attach_workspace:
         at: /tmp/workspace
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --keep GITHUB_TOKEN \
             --run bash \<<'EOF'
             set -euo pipefail

             root=$(cat root)
             cd docs
             for v in *; do
                 sha=$(git log -n1 --format=%H $v)
                 if ([ "$(curl -s https://docs.daml.com/$v/sha)" = "$sha" ] && [ "$v" != "$root" ]) \
                  || ([ "$v" == "$root" ] && [ "$(curl -s https://docs.daml.com/sha)" == "$sha" ]); then
                     echo "$v is up-to-date, nothing to do."
                 else
                     echo "updating $v to $sha."
                     upload=$(mktemp -d)
                     tar xf /tmp/workspace/html-$v.tar.gz -C $upload --strip-components=1
                     echo $sha > $upload/sha
                     aws s3 rm s3://docs-daml-com/$v --recursive --region us-east-1
                     aws s3 cp $upload s3://docs-daml-com/$v --recursive --acl public-read --region us-east-1 --no-progress
                     aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$v/*"
                 fi
             done
             cd ..
             bin/check-root $root
             sha=$(git log -n1 --format=%H docs/$root)
             upload=$(mktemp -d)
             echo $sha > $upload/sha
             cat dropdown_versions | sed 's/\(.*\)/"\1"/' | jq -sc '[.[] | {(.): .} ] | add' > $upload/versions.json
             bin/list-hidden-versions | sed 's/\(.*\)/"\1"/' | jq -sc '[.[] | {(.): .} ] | add' > $upload/snapshots.json
             if [ "$(curl -s https://docs.daml.com/sha)" = "$sha" ]; then
                 echo "root is up-to-date ($root, $sha)."
                 for f in snapshots versions; do
                     tmp=$(mktemp)
                     curl -s https://docs.daml.com/$f.json > $tmp
                     if ! diff $upload/$f.json $tmp > /dev/null; then
                         echo "Updating $f.json."
                         aws s3 cp $upload/$f.json s3://docs-daml-com/$f.json --acl public-read --region us-east-1 --no-progress
                         aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$f.json"
                     else
                         echo "$f.json is up-to-date."
                     fi
                 done
             else
                 echo "updating root to $root (sha: $sha)"
                 echo " -> creating local folder"
                 tar xf /tmp/workspace/html-$root.tar.gz -C $upload --strip-components=1
                 cat dropdown_versions | sed 's/\(.*\)/"\1"/' | jq -sc '[.[] | {(.): .} ] | add' > $upload/versions.json
                 echo -n $(cat root) > $upload/latest
                 echo " -> removing old version"
                 for f in $(aws s3 ls s3://docs-daml-com/ \
                            | grep -oP '(?<=.{30} ).*' \
                            | grep -v '^[0-9]' \
                            | grep -v '^daml-driver-for-postgresql/$'); do
                     aws s3 rm s3://docs-daml-com/$f --recursive --region us-east-1
                 done
                 echo " -> pushing new version"
                 aws s3 cp $upload s3://docs-daml-com/ --recursive --acl public-read --region us-east-1 --no-progress
                 echo " -> invalidating cache"
                 aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/*"
             fi
           EOF

  publish_snapshots:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - setup_python
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep GITHUB_TOKEN \
             --keep ARTIFACTORY_USERNAME \
             --keep ARTIFACTORY_PASSWORD \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --run bin/publish-snapshots

workflows:
  version: 2
  build:
    jobs:
    - build_docs
    - push_docs:
        requires:
        - build_docs
        filters:
          branches:
            only: main
  cron:
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only:
            - main
    jobs:
    - publish_snapshots
