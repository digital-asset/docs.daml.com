#!/usr/bin/env bash

# Use the following bash script for searching pages that have not been updated for a long time (default: 1 year) as candidates for audit.
# Occasionally we have outdated material that persists because there hasn't been a PR that explicitly removes it.

set -euo pipefail

directory=docs
extensions=(rst md)
limit=1.year
output_format="simple"

__usage="
usage: list-outdated-files [ -d directory | -e extensions | -l limit | -o output]
Options :
-d directory :  Directory to search, 'docs' by default.
                For more specific directory, use the 'docs/3.1' format.
                Use '' to search all directories.
-e extensions : List of file extensions separated by comma, 'rst,md' by default.
                Use '' to search all extensions.
-l limit :      Time limit to search, '1.year' by default.
                Must be in relative format supported by git.
                Examples: '1.week', '3.months'.
                Using large limits makes the script slow.
-o output :     Output format.
                - 'plain' for just the file names (default)
                - 'gitlog' for additional git log info
"

bold=$(tput bold)

while getopts "d:e:l:o:h" arg; do
  case $arg in
    l)
      limit=$OPTARG
      ;;
    d)
      directory=$OPTARG
      ;;
    e)
      IFS="," read -r -a extensions <<< $OPTARG
      ;;
    o)
      output_format=$OPTARG
      ;;
    h)
      echo "$__usage"
      exit 1
      ;;
  esac
done

list_unchanged_files() (
  local revision=$(git rev-list -1 --before "$limit.ago" origin/main)

  # List all files and filter out the changed ones
  comm -23 <(git ls-files | sort) <(git diff --name-only  --stat $revision | sort)
)

filter_directory() (
  if [ "$directory" != "" ]
    then grep "^$directory/"
    else cat
  fi
)

filter_extensions() (
  local encoded_extensions=$(IFS="|" ; echo "${extensions[*]}")

  if [ "$encoded_extensions" != "" ]
    then grep -E ".[$encoded_extensions]+\$"
    else cat
  fi
)

produce_output() (
  if [ "$output_format" == "gitlog" ]
  then
    while read filename
      do
        echo "File: ${bold}$filename"
        git log -1 $filename
        # git log has a longer output, so let's add 2 empty lines to separate the info visually
        echo ""
        echo ""
      done
    else cat
  fi
)

list_unchanged_files | filter_directory | filter_extensions | produce_output
