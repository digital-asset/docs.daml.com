{
  "645" : {
    "command" : "repair.party_migration.step2_import_acs(targetParticipant, alice, \"alice.acs.gz\")",
    "output" : ""
  },
  "756" : {
    "command" : "mydomain.service.set_max_rate_per_participant(100)",
    "output" : ""
  },
  "439" : {
    "command" : "participant1.ledger_api.users.rights.list(user.id)",
    "output" : "res13: UserRights = UserRights(\n  actAs = Set(alice::122058921635...),\n  readAs = Set(bob::122058921635..., eve::122058921635...),\n  participantAdmin = false,\n  identityProviderAdmin = false\n)"
  },
  "585" : {
    "command" : "",
    "output" : ""
  },
  "408" : {
    "command" : "participant1.ledger_api.users.get(\"myuser\", identityProviderId=\"\")",
    "output" : "res8: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "655" : {
    "command" : "repair.party_migration.step3_delegate_party_to_target_node(controllingParticipant, alice, targetParticipantId)",
    "output" : ""
  },
  "677" : {
    "command" : "sourceParticipant.domains.disconnect_all()",
    "output" : ""
  },
  "570" : {
    "command" : "val partyDelegation = client.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, partyId, hostingNodeId, RequestSide.From)",
    "output" : "partyDelegation : com.google.protobuf.ByteString = <ByteString@17a9c93a size=557 contents=\"\\n\\252\\004\\n\\330\\001\\n\\323\\001\\n\\320\\001\\022 Qust1JbmYo0boxqLdhHNbnxERmOZTjB52...\">"
  },
  "719" : {
    "command" : "val alice = participant1.parties.enable(\"Alice\")",
    "output" : "alice : PartyId = Alice::1220d18b1534..."
  },
  "372" : {
    "command" : "val user = participant1.ledger_api.users.create(id = \"myuser\", actAs = Set(alice), readAs = Set(bob), primaryParty = Some(alice), participantAdmin = false, isActive = true, annotations = Map(\"foo\" -> \"bar\", \"description\" -> \"This is a description\"))",
    "output" : "user : User = User(\n  id = \"myuser\",\n  primaryParty = Some(value = alice::122058921635...),\n  isActive = true,\n  annotations = Map(\"foo\" -> \"bar\", \"description\" -> \"This is a description\"),\n  identityProviderId = \"\"\n)"
  },
  "619" : {
    "command" : "",
    "output" : ""
  },
  "751" : {
    "command" : "",
    "output" : ""
  },
  "542" : {
    "command" : "hosting.id.toProtoPrimitive",
    "output" : "res1: String = \"PAR::participant2::1220a9c938aacfb7f19c5220b5bfc6a133d9d64885ac8a53df3ff3ba5cb6d06c4076\""
  },
  "460" : {
    "command" : "participant1.ledger_api.users.list(\"myotheruser\")",
    "output" : "res17: UsersPage = UsersPage(users = Vector(), nextPageToken = \"\")"
  },
  "559" : {
    "command" : "BinaryFileUtil.writeByteStringToFile(\"rootCert.bin\", rootCert)",
    "output" : ""
  },
  "416" : {
    "command" : "participant1.ledger_api.users.get(user.id)",
    "output" : "res9: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "687" : {
    "command" : "sourceParticipant.domains.reconnect_all()",
    "output" : ""
  },
  "428" : {
    "command" : "participant1.ledger_api.users.rights.grant(id = user.id, actAs = Set(alice, bob), readAs = Set(eve), participantAdmin = true)",
    "output" : "res11: UserRights = UserRights(\n  actAs = Set(bob::122058921635...),\n  readAs = Set(eve::122058921635...),\n  participantAdmin = true,\n  identityProviderAdmin = false\n)"
  },
  "392" : {
    "command" : "",
    "output" : ""
  },
  "407" : {
    "command" : "participant1.ledger_api.users.update_idp(\"myuser\", sourceIdentityProviderId=\"idp-id1\", targetIdentityProviderId=\"\")",
    "output" : ""
  },
  "630" : {
    "command" : "",
    "output" : ""
  },
  "583" : {
    "command" : "hosting.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, partyId, hosting.id, RequestSide.To)",
    "output" : "res11: com.google.protobuf.ByteString = <ByteString@24b62c5d size=557 contents=\"\\n\\252\\004\\n\\330\\001\\n\\323\\001\\n\\320\\001\\022 pP1pwhzpjd9n8ei0bRrDjiFNXiFNUT7M2...\">"
  },
  "757" : {
    "command" : "",
    "output" : ""
  },
  "682" : {
    "command" : "repair.party_migration.step6_cleanup_source(sourceParticipant, alice, \"alice.acs.gz\")",
    "output" : ""
  },
  "578" : {
    "command" : "hosting.topology.load_transaction(BinaryFileUtil.tryReadByteStringFromFile(\"partyDelegation.bin\"))",
    "output" : ""
  },
  "615" : {
    "command" : "mydomain.service.set_max_rate_per_participant(0)",
    "output" : ""
  },
  "393" : {
    "command" : "",
    "output" : ""
  },
  "654" : {
    "command" : "",
    "output" : ""
  },
  "569" : {
    "command" : "",
    "output" : ""
  },
  "633" : {
    "command" : "repair.party_migration.step1_store_acs(sourceParticipant, alice, \"alice.acs.gz\")",
    "output" : ""
  },
  "541" : {
    "command" : "",
    "output" : ""
  },
  "558" : {
    "command" : "import com.digitalasset.canton.util.BinaryFileUtil",
    "output" : ""
  },
  "662" : {
    "command" : "targetParticipant.domains.reconnect_all()",
    "output" : ""
  },
  "718" : {
    "command" : "",
    "output" : ""
  },
  "750" : {
    "command" : "participant1.parties.list(\"Alice\")",
    "output" : "res5: Seq[ListPartiesResult] = Vector(\n  ListPartiesResult(\n    party = Alice::1220d18b1534...,\n    participants = Vector(\n      ParticipantDomains(\n        participant = PAR::participant2::122089edaba8...,\n        domains = Vector(\n          DomainPermission(domain = mydomain::122056f37dec..., permission = Submission)\n        )\n      ),\n      ParticipantDomains(\n        participant = PAR::participant1::1220d18b1534...,\n        domains = Vector(\n          DomainPermission(domain = mydomain::122056f37dec..., permission = Submission)\n        )\n      )\n    )\n  )\n)"
  },
  "618" : {
    "command" : "",
    "output" : ""
  },
  "745" : {
    "command" : "participant1.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, alice, participant2.id, RequestSide.From, ParticipantPermission.Submission)",
    "output" : "res4: com.google.protobuf.ByteString = <ByteString@1da54bbc size=556 contents=\"\\n\\251\\004\\n\\327\\001\\n\\322\\001\\n\\317\\001\\022 7luZKZeLiefi8NlBbKIXXpA6UYIJViJ22...\">"
  },
  "689" : {
    "command" : "",
    "output" : ""
  },
  "584" : {
    "command" : "",
    "output" : ""
  },
  "402" : {
    "command" : "participant1.ledger_api.users.get(\"myuser\", identityProviderId=\"idp-id1\")",
    "output" : "res6: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"idp-id1\"\n)"
  },
  "577" : {
    "command" : "hosting.topology.load_transaction(BinaryFileUtil.tryReadByteStringFromFile(\"rootCert.bin\"))",
    "output" : ""
  },
  "391" : {
    "command" : "val updatedUser = participant1.ledger_api.users.update(id = user.id, modifier = user => { user.copy(primaryParty = None, annotations = user.annotations.updated(\"description\", \"This is a new description\").removed(\"foo\").updated(\"baz\", \"bar\")) })",
    "output" : "updatedUser : User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "445" : {
    "command" : "participant1.ledger_api.users.create(id = \"myotheruser\")",
    "output" : "res14: User = User(\n  id = \"myotheruser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(),\n  identityProviderId = \"\"\n)"
  },
  "713" : {
    "command" : "mydomain.service.set_max_rate_per_participant(0)",
    "output" : ""
  },
  "540" : {
    "command" : "",
    "output" : ""
  },
  "672" : {
    "command" : "repair.party_migration.step5_remove_party_delegation_from_source(controllingParticipant, alice, sourceParticipant)",
    "output" : ""
  },
  "362" : {
    "command" : "",
    "output" : ""
  },
  "434" : {
    "command" : "participant1.ledger_api.users.rights.revoke(id = user.id, actAs = Set(bob), readAs = Set(alice), participantAdmin = true)",
    "output" : "res12: UserRights = UserRights(\n  actAs = Set(bob::122058921635...),\n  readAs = Set(),\n  participantAdmin = true,\n  identityProviderAdmin = false\n)"
  },
  "616" : {
    "command" : "",
    "output" : ""
  },
  "631" : {
    "command" : "val alice = sourceParticipant.parties.find(\"Alice\")",
    "output" : "alice : PartyId = Alice::1220af0fce1a..."
  },
  "758" : {
    "command" : "",
    "output" : ""
  },
  "726" : {
    "command" : "participant2.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, alice, participant2.id, RequestSide.To, ParticipantPermission.Submission)",
    "output" : "res3: com.google.protobuf.ByteString = <ByteString@7764e829 size=556 contents=\"\\n\\251\\004\\n\\327\\001\\n\\322\\001\\n\\317\\001\\022 BUfhybvKvbSl4JnkCxZhDiXJaaUi9sVe2...\">"
  },
  "621" : {
    "command" : "",
    "output" : ""
  },
  "455" : {
    "command" : "participant1.ledger_api.users.delete(\"myotheruser\")",
    "output" : ""
  },
  "653" : {
    "command" : "",
    "output" : ""
  },
  "617" : {
    "command" : "",
    "output" : ""
  },
  "553" : {
    "command" : "val rootCert = client.topology.namespace_delegations.authorize(TopologyChangeOp.Add,secret.fingerprint,secret.fingerprint,isRootDelegation = true)",
    "output" : "rootCert : com.google.protobuf.ByteString = <ByteString@55ea7c1a size=652 contents=\"\\n\\211\\005\\n\\267\\002\\n\\262\\002\\n\\257\\002\\022 BMtC3gYbFeTQmdm8x3VR5qRmZz21BUAW\\032...\">"
  },
  "663" : {
    "command" : "repair.party_migration.step4_enable_party_on_target(targetParticipant, alice)",
    "output" : ""
  },
  "548" : {
    "command" : "val secret = client.keys.secret.generate_signing_key(\"my-party-key\")",
    "output" : "secret : SigningPublicKey = SigningPublicKey(id = 122061224807..., format = Tink, scheme = Ed25519)"
  },
  "690" : {
    "command" : "",
    "output" : ""
  },
  "640" : {
    "command" : "targetParticipant.domains.disconnect_all()",
    "output" : ""
  },
  "656" : {
    "command" : "",
    "output" : ""
  },
  "727" : {
    "command" : "",
    "output" : ""
  },
  "446" : {
    "command" : "participant1.ledger_api.users.list(filterUser = \"my\")",
    "output" : "res15: UsersPage = UsersPage(\n  users = Vector(\n    User(\n      id = \"myotheruser\",\n      primaryParty = None,\n      isActive = true,\n      annotations = Map(),\n      identityProviderId = \"\"\n    ),\n    User(\n      id = \"myuser\",\n      primaryParty = None,\n      isActive = true,\n      annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n      identityProviderId = \"\"\n    )\n  ),\n  nextPageToken = \"\"\n)"
  },
  "571" : {
    "command" : "BinaryFileUtil.writeByteStringToFile(\"partyDelegation.bin\", partyDelegation)",
    "output" : ""
  },
  "465" : {
    "command" : "participant1.ledger_api.users.update(\"myuser\", user => user.copy(isActive = false))",
    "output" : "res18: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = false,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "363" : {
    "command" : "val Seq(alice, bob, eve) = Seq(\"alice\", \"bob\", \"eve\").map(p => participant1.parties.enable(name = p, waitForDomain = DomainChoice.All))",
    "output" : "Seq(alice, bob, eve) : Seq[PartyId] = List(alice::122058921635..., bob::122058921635..., eve::122058921635...)"
  },
  "539" : {
    "command" : "",
    "output" : ""
  },
  "688" : {
    "command" : "mydomain.service.set_max_rate_per_participant(10000)",
    "output" : ""
  },
  "759" : {
    "command" : "",
    "output" : ""
  },
  "632" : {
    "command" : "",
    "output" : ""
  },
  "401" : {
    "command" : "participant1.ledger_api.users.update_idp(\"myuser\", sourceIdentityProviderId=\"\", targetIdentityProviderId=\"idp-id1\")",
    "output" : ""
  },
  "620" : {
    "command" : "",
    "output" : ""
  },
  "422" : {
    "command" : "participant1.ledger_api.users.rights.list(user.id)",
    "output" : "res10: UserRights = UserRights(\n  actAs = Set(alice::122058921635...),\n  readAs = Set(bob::122058921635...),\n  participantAdmin = false,\n  identityProviderAdmin = false\n)"
  },
  "373" : {
    "command" : "",
    "output" : ""
  },
  "564" : {
    "command" : "val partyId = PartyId(\"Client\", secret.fingerprint)",
    "output" : "partyId : PartyId = Client::122061224807..."
  },
  "400" : {
    "command" : "participant1.ledger_api.identity_provider_config.create(\"idp-id1\", isDeactivated = false, jwksUrl = \"http://someurl\", issuer = \"issuer1\", audience = None)",
    "output" : "res4: com.digitalasset.canton.ledger.api.domain.IdentityProviderConfig = IdentityProviderConfig(\n  identityProviderId = Id(value = \"idp-id1\"),\n  isDeactivated = false,\n  jwksUrl = JwksUrl(value = \"http://someurl\"),\n  issuer = \"issuer1\",\n  audience = None\n)"
  },
  "720" : {
    "command" : "",
    "output" : ""
  }
}