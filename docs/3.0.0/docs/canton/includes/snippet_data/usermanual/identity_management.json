{
  "629" : {
    "command" : "participant2.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, alice, participant2.id, RequestSide.To, ParticipantPermission.Submission)",
    "output" : "res2: com.google.protobuf.ByteString = <ByteString@53f40698 size=556 contents=\"\\n\\251\\004\\n\\327\\001\\n\\322\\001\\n\\317\\001\\022 jqLDzf9rK0vQ4jIS2bJrPAwsu8QMQ9Cv2...\">"
  },
  "550" : {
    "command" : "",
    "output" : ""
  },
  "416" : {
    "command" : "participant1.ledger_api.users.get(user.id)",
    "output" : "res9: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "623" : {
    "command" : "",
    "output" : ""
  },
  "428" : {
    "command" : "participant1.ledger_api.users.rights.grant(id = user.id, actAs = Set(alice, bob), readAs = Set(eve), participantAdmin = true)",
    "output" : "res11: UserRights = UserRights(\n  actAs = Set(bob::1220688e05e5...),\n  readAs = Set(eve::1220688e05e5...),\n  participantAdmin = true,\n  identityProviderAdmin = false\n)"
  },
  "439" : {
    "command" : "participant1.ledger_api.users.rights.list(user.id)",
    "output" : "res13: UserRights = UserRights(\n  actAs = Set(alice::1220688e05e5...),\n  readAs = Set(bob::1220688e05e5..., eve::1220688e05e5...),\n  participantAdmin = false,\n  identityProviderAdmin = false\n)"
  },
  "590" : {
    "command" : "",
    "output" : ""
  },
  "573" : {
    "command" : "participant2.domains.disconnect(\"mydomain\")",
    "output" : ""
  },
  "621" : {
    "command" : "val alice = participant1.parties.enable(\"Alice\")",
    "output" : "alice : PartyId = Alice::1220a9e37971..."
  },
  "705" : {
    "command" : "",
    "output" : ""
  },
  "549" : {
    "command" : "val alice = participant1.parties.enable(\"Alice\")",
    "output" : "alice : PartyId = Alice::1220763c0992..."
  },
  "408" : {
    "command" : "participant1.ledger_api.users.get(\"myuser\", identityProviderId=\"\")",
    "output" : "res8: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "677" : {
    "command" : "participant1.health.ping(participant1.id)",
    "output" : "res6: Duration = 450 milliseconds"
  },
  "597" : {
    "command" : "",
    "output" : ""
  },
  "372" : {
    "command" : "val user = participant1.ledger_api.users.create(id = \"myuser\", actAs = Set(alice), readAs = Set(bob), primaryParty = Some(alice), participantAdmin = false, isActive = true, annotations = Map(\"foo\" -> \"bar\", \"description\" -> \"This is a description\"))",
    "output" : "user : User = User(\n  id = \"myuser\",\n  primaryParty = Some(value = alice::1220688e05e5...),\n  isActive = true,\n  annotations = Map(\"foo\" -> \"bar\", \"description\" -> \"This is a description\"),\n  identityProviderId = \"\"\n)"
  },
  "460" : {
    "command" : "participant1.ledger_api.users.list(\"myotheruser\")",
    "output" : "res17: UsersPage = UsersPage(users = Vector(), nextPageToken = \"\")"
  },
  "598" : {
    "command" : "",
    "output" : ""
  },
  "392" : {
    "command" : "",
    "output" : ""
  },
  "407" : {
    "command" : "participant1.ledger_api.users.update_idp(\"myuser\", sourceIdentityProviderId=\"idp-id1\", targetIdentityProviderId=\"\")",
    "output" : ""
  },
  "630" : {
    "command" : "",
    "output" : ""
  },
  "583" : {
    "command" : "participant2.domains.reconnect(\"mydomain\")",
    "output" : "res6: Boolean = true"
  },
  "710" : {
    "command" : "",
    "output" : ""
  },
  "578" : {
    "command" : "repair.party_migration.step2_import_acs(participant2, \"alice.acs.gz\")",
    "output" : ""
  },
  "650" : {
    "command" : "participant2.domains.disconnect_all()",
    "output" : ""
  },
  "622" : {
    "command" : "",
    "output" : ""
  },
  "393" : {
    "command" : "",
    "output" : ""
  },
  "584" : {
    "command" : "",
    "output" : ""
  },
  "562" : {
    "command" : "repair.party_migration.step1_hold_and_store_acs(alice, participant1, targetParticipantId, \"alice.acs.gz\")",
    "output" : ""
  },
  "402" : {
    "command" : "participant1.ledger_api.users.get(\"myuser\", identityProviderId=\"idp-id1\")",
    "output" : "res6: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"idp-id1\"\n)"
  },
  "391" : {
    "command" : "val updatedUser = participant1.ledger_api.users.update(id = user.id, modifier = user => { user.copy(primaryParty = None, annotations = user.annotations.updated(\"description\", \"This is a new description\").removed(\"foo\").updated(\"baz\", \"bar\")) })",
    "output" : "updatedUser : User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "445" : {
    "command" : "participant1.ledger_api.users.create(id = \"myotheruser\")",
    "output" : "res14: User = User(\n  id = \"myotheruser\",\n  primaryParty = None,\n  isActive = true,\n  annotations = Map(),\n  identityProviderId = \"\"\n)"
  },
  "704" : {
    "command" : "participant2.domains.reconnect_all()",
    "output" : ""
  },
  "362" : {
    "command" : "",
    "output" : ""
  },
  "434" : {
    "command" : "participant1.ledger_api.users.rights.revoke(id = user.id, actAs = Set(bob), readAs = Set(alice), participantAdmin = true)",
    "output" : "res12: UserRights = UserRights(\n  actAs = Set(bob::1220688e05e5...),\n  readAs = Set(),\n  participantAdmin = true,\n  identityProviderAdmin = false\n)"
  },
  "685" : {
    "command" : "val timestamp = participant1.topology.party_to_participant_mappings.list(filterStore=\"mydomain\", filterParty=\"Alice\").map(_.context.validFrom).max",
    "output" : "timestamp : Instant = 2023-11-21T16:34:08.572527Z"
  },
  "455" : {
    "command" : "participant1.ledger_api.users.delete(\"myotheruser\")",
    "output" : ""
  },
  "563" : {
    "command" : "",
    "output" : ""
  },
  "658" : {
    "command" : "participant1.topology.party_to_participant_mappings.authorize(TopologyChangeOp.Add, alice, participant2.id, RequestSide.From, ParticipantPermission.Submission)",
    "output" : "res4: com.google.protobuf.ByteString = <ByteString@1ac5ac56 size=556 contents=\"\\n\\251\\004\\n\\327\\001\\n\\322\\001\\n\\317\\001\\022 yjSSLUWXNVibCV86JQ8aWTK1PXqzlsdm2...\">"
  },
  "589" : {
    "command" : "repair.party_migration.step3_enable_on_target(alice, participant2)",
    "output" : ""
  },
  "663" : {
    "command" : "participant1.parties.list(\"Alice\")",
    "output" : "res5: Seq[ListPartiesResult] = Vector(\n  ListPartiesResult(\n    party = Alice::1220a9e37971...,\n    participants = Vector(\n      ParticipantDomains(\n        participant = PAR::participant1::1220a9e37971...,\n        domains = Vector(\n          DomainPermission(domain = mydomain::122006622d39..., permission = Submission)\n        )\n      ),\n      ParticipantDomains(\n        participant = PAR::participant2::12205a909fd7...,\n        domains = Vector(\n          DomainPermission(domain = mydomain::122006622d39..., permission = Submission)\n        )\n      )\n    )\n  )\n)"
  },
  "548" : {
    "command" : "",
    "output" : ""
  },
  "446" : {
    "command" : "participant1.ledger_api.users.list(filterUser = \"my\")",
    "output" : "res15: UsersPage = UsersPage(\n  users = Vector(\n    User(\n      id = \"myotheruser\",\n      primaryParty = None,\n      isActive = true,\n      annotations = Map(),\n      identityProviderId = \"\"\n    ),\n    User(\n      id = \"myuser\",\n      primaryParty = None,\n      isActive = true,\n      annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n      identityProviderId = \"\"\n    )\n  ),\n  nextPageToken = \"\"\n)"
  },
  "595" : {
    "command" : "participant1.domains.disconnect(\"mydomain\")",
    "output" : ""
  },
  "465" : {
    "command" : "participant1.ledger_api.users.update(\"myuser\", user => user.copy(isActive = false))",
    "output" : "res18: User = User(\n  id = \"myuser\",\n  primaryParty = None,\n  isActive = false,\n  annotations = Map(\"baz\" -> \"bar\", \"description\" -> \"This is a new description\"),\n  identityProviderId = \"\"\n)"
  },
  "363" : {
    "command" : "val Seq(alice, bob, eve) = Seq(\"alice\", \"bob\", \"eve\").map(p => participant1.parties.enable(name = p, waitForDomain = DomainChoice.All))",
    "output" : "Seq(alice, bob, eve) : Seq[PartyId] = List(alice::1220688e05e5..., bob::1220688e05e5..., eve::1220688e05e5...)"
  },
  "556" : {
    "command" : "val targetParticipantId = participant2.id",
    "output" : "targetParticipantId : ParticipantId = PAR::participant2::122076c45f69..."
  },
  "699" : {
    "command" : "repair.party_migration.step2_import_acs(participant2, \"alice.acs.gz\")",
    "output" : ""
  },
  "401" : {
    "command" : "participant1.ledger_api.users.update_idp(\"myuser\", sourceIdentityProviderId=\"\", targetIdentityProviderId=\"idp-id1\")",
    "output" : ""
  },
  "620" : {
    "command" : "",
    "output" : ""
  },
  "422" : {
    "command" : "participant1.ledger_api.users.rights.list(user.id)",
    "output" : "res10: UserRights = UserRights(\n  actAs = Set(alice::1220688e05e5...),\n  readAs = Set(bob::1220688e05e5...),\n  participantAdmin = false,\n  identityProviderAdmin = false\n)"
  },
  "373" : {
    "command" : "",
    "output" : ""
  },
  "664" : {
    "command" : "",
    "output" : ""
  },
  "400" : {
    "command" : "participant1.ledger_api.identity_provider_config.create(\"idp-id1\", isDeactivated = false, jwksUrl = \"http://someurl\", issuer = \"issuer1\", audience = None)",
    "output" : "res4: com.digitalasset.canton.ledger.api.domain.IdentityProviderConfig = IdentityProviderConfig(\n  identityProviderId = Id(value = \"idp-id1\"),\n  isDeactivated = false,\n  jwksUrl = JwksUrl(value = \"http://someurl\"),\n  issuer = \"issuer1\",\n  audience = None\n)"
  },
  "596" : {
    "command" : "repair.party_migration.step4_clean_up_source(alice, participant1, \"alice.acs.gz\")",
    "output" : ""
  },
  "691" : {
    "command" : "participant1.repair.download(Set(alice), \"alice.acs.gz\", filterDomainId=\"mydomain\", timestamp = Some(timestamp))",
    "output" : ""
  }
}