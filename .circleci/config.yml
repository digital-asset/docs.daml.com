# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2.1

env: &env
  TERM: dumb
  CI: "true"
  USER: circleci

commands:
  setup_nix:
    description: Set up Nix
    steps:
    - run:
        name: make_cache_key
        command: |
          set -euo pipefail

          git log -n1 --format=%H nix shell.nix docs/*/nix docs/*/shell.nix > /tmp/nix-cache-key
          sudo mkdir /nix
          sudo chown $USER /nix
    - restore_cache:
        keys:
        - nix-{{ checksum "/tmp/nix-cache-key" }}
    - run:
       name: setup_nix
       command: |
         set -euo pipefail

         if [ -f ~/.config/nix/nix.conf ]; then
             exit 0
         fi

         # Disabling sandbox because:
         # 1. It doesn't work on CircleCI (sethostname is not allowed)
         # 2. We don't plan to build anything, so the risk is fairly low
         mkdir -p ~/.config/nix
         echo 'sandbox = false' >> ~/.config/nix/nix.conf

         sh <(curl -fsSL https://nixos.org/nix/install) --no-daemon
         . /home/circleci/.nix-profile/etc/profile.d/nix.sh
         nix-shell shell.nix --run 'echo "Done loading all root packages."'
         cd docs
         for v in *; do
             cd $v
             nix-shell shell.nix --pure --run 'echo "Done loading all packages in $v."'
             cd -
         done
    - save_cache:
        key: nix-{{ checksum "/tmp/nix-cache-key" }}
        paths:
        - /nix
        - /home/circleci/.nix-profile
        - /home/circleci/.nix-channels
        - /home/circleci/.nix-defexpr
        - /home/circleci/.config/nix
  setup_python:
    description: Set up Python
    steps:
    - run:
        name: setup_python
        command: |
          set -euo pipefail
          . /home/circleci/.nix-profile/etc/profile.d/nix.sh
          cd docs
          for v in *; do
              cd $v
              if [ -f bin/setup-python ]; then
                  nix-shell shell.nix --pure --run "bin/setup-python"
              fi
              cd -
          done

jobs:
  build_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - setup_python
      - run:
         name: build
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           mkdir -p /tmp/workspace

           cd docs
           for v in *; do
               cd $v
               nix-shell shell.nix \
                 --pure \
                 --keep ARTIFACTORY_USERNAME \
                 --keep ARTIFACTORY_PASSWORD \
                 --run bash \<<'EOF'
                   set -euo pipefail
                   if [ -f .python-env/bin/activate ]; then
                       source .python-env/bin/activate
                       PATH="$(pwd)/.python-env/bin:$PATH"
                   fi
                   bin/build
           EOF
               mv workdir/target/html-$v.tar.gz /tmp/workspace
               cd -
           done
           cd ..
           root=$(cat root)
           bin/check-root $root
      - store_artifacts:
         path: /tmp/workspace
      - persist_to_workspace:
         root: /tmp/workspace
         paths:
         - "*"

  push_docs:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - attach_workspace:
         at: /tmp/workspace
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --run bash \<<'EOF'
             set -euo pipefail

             root=$(cat root)
             cd docs
             for v in *; do
                 sha=$(git log -n1 --format=%H $v)
                 if ([ "$(curl https://docs.daml.com/$v/sha)" = "$sha" ] && [ "$v" != "$root" ]) \
                  || ([ "$v" == "$root" ] && [ "$(curl https://docs.daml.com/sha)" == "$sha" ]); then
                     echo "$v is up-to-date, nothing to do."
                 else
                     echo "updating $v to $sha."
                     upload=$(mktemp -d)
                     tar xf /tmp/workspace/html-$v.tar.gz -C $upload --strip-components=1
                     echo $sha > $upload/sha
                     aws s3 rm s3://docs-daml-com/$v --recursive --region us-east-1
                     aws s3 cp $upload s3://docs-daml-com/$v --recursive --acl public-read --region us-east-1 --no-progress
                     aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$v/*"
                 fi
             done
             cd ..
             bin/check-root $root
             sha=$(git log -n1 --format=%H docs/$root)
             if [ "$(curl https://docs.daml.com/sha)" = "$sha" ]; then
                 echo "root is up-to-date ($root, $sha), nothing to do."
             else
                 echo "updating root to $root (sha: $sha)"
                 echo " -> creating local folder"
                 upload=$(mktemp -d)
                 tar xf /tmp/workspace/html-$root.tar.gz -C $upload --strip-components=1
                 echo $sha > $upload/sha
                 cat dropdown_versions | sed 's/\(.*\)/"\1"/' | jq -sc '[.[] | {(.): .} ] | add' > $upload/versions.json
                 bin/list-hidden-versions > $upload/snapshots.json
                 cp root $upload/latest
                 echo " -> removing old version"
                 for f in $(aws s3 ls s3://docs-daml-com/ \
                            | grep -oP '(?<=.{30} ).*' \
                            | grep -v '^[0-9]' \
                            | grep -v '^daml-driver-for-postgresql/$' \
                            | grep -v '^latest$' \
                            | grep -v '^snapshots.json$' \
                            | grep -v '^versions.json$'); do
                     aws s3 rm s3://docs-daml-com/$f --recursive --region us-east-1
                 done
                 echo " -> pushing new version"
                 aws s3 cp $upload s3://docs-daml-com/ --recursive --acl public-read --region us-east-1 --no-progress
                 echo " -> invalidating cache"
                 aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/*"
             fi
           EOF

  publish_snapshots:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - setup_python
      - run:
         name: push
         command: |
           set -euo pipefail
           . /home/circleci/.nix-profile/etc/profile.d/nix.sh

           nix-shell shell.nix \
             --pure \
             --keep GITHUB_TOKEN \
             --keep ARTIFACTORY_USERNAME \
             --keep ARTIFACTORY_PASSWORD \
             --keep AWS_ACCESS_KEY_ID \
             --keep AWS_SECRET_ACCESS_KEY \
             --run bash \<<'EOF'
             set -euo pipefail
             snapshots=$(curl -sf https://docs.daml.com/snapshots.json \
                        | jq -r '
                                # The snapshots.json file is a map of version to version.
                                # {"2.2.0-snap1": "2.2.0-snap1", "1.2.0-snap2": "1.2.0-snap2"}
                                # keys turns that into a vector of just the keys (the versions)
                                keys
                                # ["2.2.0-snap1", "1.2.0-snap2"]
                                # [] turns that vector into each individual string in it
                                | .[]
                                # we create (for each string) a new vector
                                # string division is split
                                | [., . / "."]
                                # ["2.2.0-snap1", ["2", "2", "0-snap1"]]
                                # select is filter
                                # we only keep versions after 1.x line
                                | select(
                                          # first element of second element: major version number
                                          # converted to number so we can make a numeric comparison
                                         (.[1][0] | tonumber) > 1
                                        )
                                # we keep just the version number, we do not need the vector of
                                # elements anymore
                                | .[0]
                                ' \
                        )
             graphql() (
               version=$1
               echo '
               {
                 repository (name: "daml", owner: "digital-asset") {
                   release (tagName: "v'$version'") {
                     releaseAssets (first: 100) {
                       nodes {
                         name
                       }
                     }
                   }
                 }
               }
               '
             )

             for version in $snapshots; do
                 echo "> $version"
                 if curl -Ifs https://docs.daml.com/$version/index.html &> /dev/null
                 then echo "-> Nothing to do."
                 elif [ "$version" = "2.0.1-snapshot.20220419.9374.0.44df8f12" ] \
                   || [ "$version" = "2.1.0-snapshot.20220411.9707.0.f6fed6ea" ] \
                   || [ "$version" = "2.5.0-snapshot.20221010.10736.0.2f453a14" ]
                 then echo " -> Skipping, known broken."
                 else
                     base=${version%-*}
                     if [ -d docs/$base ]; then
                         (
                             cd docs/$base
                             echo " -> Getting Canton version"
                             canton=$(curl -H "Authorization: bearer $GITHUB_TOKEN" \
                                           --fail \
                                           --silent \
                                           https://api.github.com/graphql \
                                           -XPOST \
                                           -d"$(jq -n --arg q "$(graphql $version)" '{query: $q}')" \
                                    | jq -r '.data.repository.release.releaseAssets.nodes[].name' \
                                    | grep canton \
                                    | head -1 \
                                    | sed 's/canton-open-source-\(.*\)\.tar\.gz/\1/')
                             echo "-> Building daml $version with canton $canton & finance $finance."
                             tmp=$(mktemp)
                             jq --arg daml $version \
                                --arg canton $canton \
                                '.daml |= $daml | .canton |= $canton' \
                                versions.json \
                                > $tmp
                             mv $tmp versions.json
                             nix-shell shell.nix --pure --run bash \<<'NIX'
                                 set euo pipefail
                                 if [ -f .python-env/bin/activate ]; then
                                     source .python-env/bin/activate
                                     PATH="$(pwd)/.python-env/bin:$PATH"
                                 fi
                                 bin/clean
                                 bin/build
           NIX
                             upload=$(mktemp -d)
                             tar xf workdir/target/html-$base.tar.gz -C $upload --strip-components=1
                             aws s3 cp $upload s3://docs-daml-com/$version --recursive --acl public-read --region us-east-1 --no-progress
                             aws cloudfront create-invalidation --distribution-id E1U753I56ERH55 --paths "/$version/*"
                             echo "-> Done."
                         )
                     else
                         echo " -> No base version $base found for $version, unable to proceed."
                         exit 1
                     fi
                 fi
             done
           EOF

workflows:
  version: 2
  build:
    jobs:
    - build_docs
    - push_docs:
        requires:
        - build_docs
        filters:
          branches:
            only: main
  cron:
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only:
            - main
    jobs:
    - publish_snapshots
